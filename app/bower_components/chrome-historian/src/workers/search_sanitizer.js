// Generated by CoffeeScript 1.7.1
(function() {
  var SearchSanitizer, escapeRegExp, timeOfEvent;

  SearchSanitizer = (function() {
    function SearchSanitizer() {}

    SearchSanitizer.prototype.run = function(results, options) {
      var out, result, _i, _len;
      this.options = options;
      if (this.options.text.match(/^\/.*\/$/)) {
        this.terms = this.options.text.slice(1, -1);
      } else {
        this.terms = this.options.text.split(' ');
      }
      out = [];
      for (_i = 0, _len = results.length; _i < _len; _i++) {
        result = results[_i];
        if (out.length >= 1000) {
          break;
        } else {
          if (this.verifyTextMatch(result)) {
            out.push(result);
          }
        }
      }
      out.sort(this.sortByTime);
      return out;
    };

    SearchSanitizer.prototype.verifyTextMatch = function(result) {
      var hits, regExp, term, _i, _len, _ref;
      hits = [];
      regExp = null;
      if (Array.isArray(this.terms)) {
        _ref = this.terms;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          term = _ref[_i];
          regExp = new RegExp(escapeRegExp(term), "i");
          if (result.url.match(regExp) || result.title.match(regExp)) {
            hits.push(true);
          }
        }
        if (hits.length === this.terms.length) {
          return true;
        } else {
          return false;
        }
      } else {
        regExp = new RegExp(this.terms);
        if (result.url.match(regExp) || result.title.match(regExp)) {
          return true;
        }
      }
    };

    SearchSanitizer.prototype.sortByTime = function(a, b) {
      var aTime, bTime;
      aTime = timeOfEvent(a);
      bTime = timeOfEvent(b);
      if (aTime > bTime) {
        return -1;
      }
      if (aTime < bTime) {
        return 1;
      }
      return 0;
    };

    return SearchSanitizer;

  })();

  timeOfEvent = function(result) {
    return result.lastVisitTime || new Date(result.startTime).getTime();
  };

  escapeRegExp = function(str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
  };

  if (typeof onServer !== "undefined" && onServer !== null) {
    module.exports = SearchSanitizer;
  } else {
    self.addEventListener('message', function(e) {
      var sanitizer;
      sanitizer = new SearchSanitizer();
      return postMessage(sanitizer.run(e.data.results, e.data.options));
    });
  }

}).call(this);
